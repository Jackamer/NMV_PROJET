#include <linux/module.h>
#include <linux/moduleparam.h>
#include <linux/kernel.h>
#include <linux/slab.h>
#include <linux/fs.h>
#include <linux/kthread.h>
#include <linux/delay.h>
#include <linux/uaccess.h>
#include <linux/string.h>
#include "helloioctl.h"

MODULE_DESCRIPTION("A module who insert a driver");
MODULE_AUTHOR("Youness IBRAHIMY, Arnaud GUERMONT");
MODULE_LICENSE("GPL");

#define HELLO _IOR(MAGIC, 0, char *)
#define WHO _IOW(MAGIC, 1, char *)

static char *name = "hello";
static char msg[1024] = "Hello ioctl";
static int major;

static long device_ops(struct file *filp, unsigned int cmd, unsigned long arg)
{
	char buff[1024];

	switch (cmd) {
	case HELLO:
		copy_to_user((char *)arg, msg, strlen(msg));
		break;
	case WHO:
		copy_from_user(buff, (char *)arg, strlen(buff));
		strcpy(msg, "Hello ");
		pr_warn("%s\n", buff);
		strcat(msg, buff);
		strcat(msg, " !");
		break;
	default:
		return -ENOTTY;
	}

	return 0;
}

const struct file_operations ops = {
	.unlocked_ioctl = device_ops
};

static int helloictl_init(void)
{
	major = register_chrdev(0, name, &ops);

	if (!major) {
		pr_warn("Major not set\n");
		return -1;
	}

	pr_warn("helloictl module loaded\nMajor : %d\n", major);
	return 0;
}

static void helloictl_exit(void)
{
	unregister_chrdev(major, name);
	pr_warn("helloictl module unloaded\n");
}

module_init(helloictl_init);
module_exit(helloictl_exit);
